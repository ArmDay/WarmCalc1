{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport firebase from 'firebase/app';\nexport default {\n  actions: {\n    createRecord: function createRecord(_ref, record) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var commit, dispatch, uid;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref.commit, dispatch = _ref.dispatch;\n                _context.prev = 1;\n                _context.next = 4;\n                return dispatch('getUid');\n\n              case 4:\n                uid = _context.sent;\n                _context.next = 7;\n                return firebase.database().ref(\"/adds/records\").push(record);\n\n              case 7:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](1);\n                commit('setError', _context.t0);\n                throw _context.t0;\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 10]]);\n      }))();\n    },\n    fetchRecords: function fetchRecords(_ref2) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var dispatch, commit, uid, records;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                dispatch = _ref2.dispatch, commit = _ref2.commit;\n                _context2.prev = 1;\n                _context2.next = 4;\n                return dispatch('getUid');\n\n              case 4:\n                uid = _context2.sent;\n                _context2.next = 7;\n                return firebase.database().ref(\"/adds/records\").once('value');\n\n              case 7:\n                _context2.t0 = _context2.sent.val();\n\n                if (_context2.t0) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                _context2.t0 = {};\n\n              case 10:\n                records = _context2.t0;\n                return _context2.abrupt(\"return\", Object.keys(records).map(function (key) {\n                  return _objectSpread(_objectSpread({}, records[key]), {}, {\n                    id: key\n                  });\n                }));\n\n              case 14:\n                _context2.prev = 14;\n                _context2.t1 = _context2[\"catch\"](1);\n                commit('setError', _context2.t1);\n                throw _context2.t1;\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[1, 14]]);\n      }))();\n    },\n    fetchRecordById: function fetchRecordById(_ref3, id) {\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var dispatch, commit, uid, record;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                dispatch = _ref3.dispatch, commit = _ref3.commit;\n                _context3.prev = 1;\n                _context3.next = 4;\n                return dispatch('getUid');\n\n              case 4:\n                uid = _context3.sent;\n                _context3.next = 7;\n                return firebase.database().ref(\"/adds/records\").child(id).once('value');\n\n              case 7:\n                _context3.t0 = _context3.sent.val();\n\n                if (_context3.t0) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                _context3.t0 = {};\n\n              case 10:\n                record = _context3.t0;\n                return _context3.abrupt(\"return\", _objectSpread(_objectSpread({}, record), {}, {\n                  id: id\n                }));\n\n              case 14:\n                _context3.prev = 14;\n                _context3.t1 = _context3[\"catch\"](1);\n                commit('setError', _context3.t1);\n                throw _context3.t1;\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[1, 14]]);\n      }))();\n    }\n  }\n};","map":{"version":3,"names":["firebase","actions","createRecord","record","commit","dispatch","uid","database","ref","push","fetchRecords","once","val","records","Object","keys","map","key","id","fetchRecordById","child"],"sources":["C:/Users/serge/OneDrive/Рабочий стол/warm/Helping-hand-pd-master/src/store/recordss.js"],"sourcesContent":["import firebase from 'firebase/app'\r\n\r\n\r\nexport default {\r\n  actions: {\r\n    async createRecord({commit, dispatch}, record) {\r\n      try {\r\n        const uid = await dispatch('getUid')\r\n        return await firebase.database().ref(`/adds/records`).push(record)\r\n      } catch (e) {\r\n        commit('setError', e)\r\n        throw e\r\n      }\r\n    },\r\n    async fetchRecords({dispatch, commit}) {\r\n      try {\r\n        const uid = await dispatch('getUid')\r\n        const records = (await firebase.database().ref(`/adds/records`).once('value')).val() || {}\r\n        return Object.keys(records).map(key => ({...records[key], id: key}))\r\n      } catch (e) {\r\n        commit('setError', e)\r\n        throw e\r\n      }\r\n    },\r\n    async fetchRecordById({dispatch, commit}, id) {\r\n      try {\r\n        const uid = await dispatch('getUid')\r\n        \r\n        const record = (await firebase.database().ref(`/adds/records`).child(id).once('value')).val() || {}\r\n        return {...record, id:id}\r\n      } catch (e) {\r\n        commit('setError', e)\r\n        throw e\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;+CACA,oJ;;;;;;AADA,OAAOA,QAAP,MAAqB,cAArB;AAGA,eAAe;EACbC,OAAO,EAAE;IACDC,YADC,8BACgCC,MADhC,EACwC;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAA3BC,MAA2B,QAA3BA,MAA2B,EAAnBC,QAAmB,QAAnBA,QAAmB;gBAAA;gBAAA;gBAAA,OAEzBA,QAAQ,CAAC,QAAD,CAFiB;;cAAA;gBAErCC,GAFqC;gBAAA;gBAAA,OAG9BN,QAAQ,CAACO,QAAT,GAAoBC,GAApB,kBAAyCC,IAAzC,CAA8CN,MAA9C,CAH8B;;cAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAK3CC,MAAM,CAAC,UAAD,cAAN;gBAL2C;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAQ9C,CATM;IAUDM,YAVC,+BAUgC;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAnBL,QAAmB,SAAnBA,QAAmB,EAATD,MAAS,SAATA,MAAS;gBAAA;gBAAA;gBAAA,OAEjBC,QAAQ,CAAC,QAAD,CAFS;;cAAA;gBAE7BC,GAF6B;gBAAA;gBAAA,OAGZN,QAAQ,CAACO,QAAT,GAAoBC,GAApB,kBAAyCG,IAAzC,CAA8C,OAA9C,CAHY;;cAAA;gBAAA,8BAG4CC,GAH5C;;gBAAA;kBAAA;kBAAA;gBAAA;;gBAAA,eAGqD,EAHrD;;cAAA;gBAG7BC,OAH6B;gBAAA,kCAI5BC,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,GAArB,CAAyB,UAAAC,GAAG;kBAAA,uCAASJ,OAAO,CAACI,GAAD,CAAhB;oBAAuBC,EAAE,EAAED;kBAA3B;gBAAA,CAA5B,CAJ4B;;cAAA;gBAAA;gBAAA;gBAMnCb,MAAM,CAAC,UAAD,eAAN;gBANmC;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAStC,CAnBM;IAoBDe,eApBC,kCAoBmCD,EApBnC,EAoBuC;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAvBb,QAAuB,SAAvBA,QAAuB,EAAbD,MAAa,SAAbA,MAAa;gBAAA;gBAAA;gBAAA,OAExBC,QAAQ,CAAC,QAAD,CAFgB;;cAAA;gBAEpCC,GAFoC;gBAAA;gBAAA,OAIpBN,QAAQ,CAACO,QAAT,GAAoBC,GAApB,kBAAyCY,KAAzC,CAA+CF,EAA/C,EAAmDP,IAAnD,CAAwD,OAAxD,CAJoB;;cAAA;gBAAA,8BAI8CC,GAJ9C;;gBAAA;kBAAA;kBAAA;gBAAA;;gBAAA,eAIuD,EAJvD;;cAAA;gBAIpCT,MAJoC;gBAAA,kEAK/BA,MAL+B;kBAKvBe,EAAE,EAACA;gBALoB;;cAAA;gBAAA;gBAAA;gBAO1Cd,MAAM,CAAC,UAAD,eAAN;gBAP0C;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAU7C;EA9BM;AADI,CAAf"},"metadata":{},"sourceType":"module"}